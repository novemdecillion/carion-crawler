/*
 * This file is generated by jOOQ.
 */
package io.github.novemdecillion.carioncrawler.adapter.jooq.tables.records


import io.github.novemdecillion.carioncrawler.adapter.jooq.tables.SearchedPageTable
import io.github.novemdecillion.carioncrawler.adapter.jooq.tables.interfaces.ISearchedPage

import java.time.OffsetDateTime

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record2
import org.jooq.Row2
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class SearchedPageRecord() : UpdatableRecordImpl<SearchedPageRecord>(SearchedPageTable.SEARCHED_PAGE), Record2<String?, OffsetDateTime?>, ISearchedPage {

    override var url: String?
        set(value) = set(0, value)
        get() = get(0) as String?

    override var createAt: OffsetDateTime?
        set(value) = set(1, value)
        get() = get(1) as OffsetDateTime?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<String?> = super.key() as Record1<String?>

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row2<String?, OffsetDateTime?> = super.fieldsRow() as Row2<String?, OffsetDateTime?>
    override fun valuesRow(): Row2<String?, OffsetDateTime?> = super.valuesRow() as Row2<String?, OffsetDateTime?>
    override fun field1(): Field<String?> = SearchedPageTable.SEARCHED_PAGE.URL
    override fun field2(): Field<OffsetDateTime?> = SearchedPageTable.SEARCHED_PAGE.CREATE_AT
    override fun component1(): String? = url
    override fun component2(): OffsetDateTime? = createAt
    override fun value1(): String? = url
    override fun value2(): OffsetDateTime? = createAt

    override fun value1(value: String?): SearchedPageRecord {
        this.url = value
        return this
    }

    override fun value2(value: OffsetDateTime?): SearchedPageRecord {
        this.createAt = value
        return this
    }

    override fun values(value1: String?, value2: OffsetDateTime?): SearchedPageRecord {
        this.value1(value1)
        this.value2(value2)
        return this
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    override fun from(from: ISearchedPage) {
        url = from.url
        createAt = from.createAt
    }

    override fun <E : ISearchedPage> into(into: E): E {
        into.from(this)
        return into
    }

    /**
     * Create a detached, initialised SearchedPageRecord
     */
    constructor(url: String? = null, createAt: OffsetDateTime? = null): this() {
        this.url = url
        this.createAt = createAt
    }
}
