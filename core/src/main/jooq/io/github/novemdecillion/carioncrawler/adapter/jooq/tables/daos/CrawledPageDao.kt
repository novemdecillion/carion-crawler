/*
 * This file is generated by jOOQ.
 */
package io.github.novemdecillion.carioncrawler.adapter.jooq.tables.daos


import io.github.novemdecillion.carioncrawler.adapter.jooq.tables.CrawledPageTable
import io.github.novemdecillion.carioncrawler.adapter.jooq.tables.pojos.CrawledPageEntity
import io.github.novemdecillion.carioncrawler.adapter.jooq.tables.records.CrawledPageRecord

import java.time.OffsetDateTime

import kotlin.collections.List

import org.jooq.Configuration
import org.jooq.impl.DAOImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class CrawledPageDao(configuration: Configuration?) : DAOImpl<CrawledPageRecord, CrawledPageEntity, String>(CrawledPageTable.CRAWLED_PAGE, CrawledPageEntity::class.java, configuration) {

    /**
     * Create a new CrawledPageDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: CrawledPageEntity): String? = o.url

    /**
     * Fetch records that have <code>url BETWEEN lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfUrlTable(lowerInclusive: String?, upperInclusive: String?): List<CrawledPageEntity> = fetchRange(CrawledPageTable.CRAWLED_PAGE.URL, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>url IN (values)</code>
     */
    fun fetchByUrlTable(vararg values: String): List<CrawledPageEntity> = fetch(CrawledPageTable.CRAWLED_PAGE.URL, *values)

    /**
     * Fetch a unique record that has <code>url = value</code>
     */
    fun fetchOneByUrlTable(value: String): CrawledPageEntity? = fetchOne(CrawledPageTable.CRAWLED_PAGE.URL, value)

    /**
     * Fetch records that have <code>html BETWEEN lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfHtmlTable(lowerInclusive: String?, upperInclusive: String?): List<CrawledPageEntity> = fetchRange(CrawledPageTable.CRAWLED_PAGE.HTML, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>html IN (values)</code>
     */
    fun fetchByHtmlTable(vararg values: String): List<CrawledPageEntity> = fetch(CrawledPageTable.CRAWLED_PAGE.HTML, *values)

    /**
     * Fetch records that have <code>text BETWEEN lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfTextTable(lowerInclusive: String?, upperInclusive: String?): List<CrawledPageEntity> = fetchRange(CrawledPageTable.CRAWLED_PAGE.TEXT, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>text IN (values)</code>
     */
    fun fetchByTextTable(vararg values: String): List<CrawledPageEntity> = fetch(CrawledPageTable.CRAWLED_PAGE.TEXT, *values)

    /**
     * Fetch records that have <code>seen BETWEEN lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfSeenTable(lowerInclusive: OffsetDateTime?, upperInclusive: OffsetDateTime?): List<CrawledPageEntity> = fetchRange(CrawledPageTable.CRAWLED_PAGE.SEEN, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>seen IN (values)</code>
     */
    fun fetchBySeenTable(vararg values: OffsetDateTime): List<CrawledPageEntity> = fetch(CrawledPageTable.CRAWLED_PAGE.SEEN, *values)
}
