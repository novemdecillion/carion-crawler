/*
 * This file is generated by jOOQ.
 */
package io.github.novemdecillion.carioncrawler.adapter.jooq.tables.daos


import io.github.novemdecillion.carioncrawler.adapter.db.CrawledStatus
import io.github.novemdecillion.carioncrawler.adapter.jooq.tables.CrawledPageTable
import io.github.novemdecillion.carioncrawler.adapter.jooq.tables.pojos.CrawledPageEntity
import io.github.novemdecillion.carioncrawler.adapter.jooq.tables.records.CrawledPageRecord

import java.time.OffsetDateTime

import kotlin.collections.List

import org.jooq.Configuration
import org.jooq.impl.DAOImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class CrawledPageDao(configuration: Configuration?) : DAOImpl<CrawledPageRecord, CrawledPageEntity, String>(CrawledPageTable.CRAWLED_PAGE, CrawledPageEntity::class.java, configuration) {

    /**
     * Create a new CrawledPageDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: CrawledPageEntity): String? = o.url

    /**
     * Fetch records that have <code>url BETWEEN lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfUrlTable(lowerInclusive: String?, upperInclusive: String?): List<CrawledPageEntity> = fetchRange(CrawledPageTable.CRAWLED_PAGE.URL, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>url IN (values)</code>
     */
    fun fetchByUrlTable(vararg values: String): List<CrawledPageEntity> = fetch(CrawledPageTable.CRAWLED_PAGE.URL, *values)

    /**
     * Fetch a unique record that has <code>url = value</code>
     */
    fun fetchOneByUrlTable(value: String): CrawledPageEntity? = fetchOne(CrawledPageTable.CRAWLED_PAGE.URL, value)

    /**
     * Fetch records that have <code>status BETWEEN lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfStatusTable(lowerInclusive: CrawledStatus?, upperInclusive: CrawledStatus?): List<CrawledPageEntity> = fetchRange(CrawledPageTable.CRAWLED_PAGE.STATUS, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>status IN (values)</code>
     */
    fun fetchByStatusTable(vararg values: CrawledStatus): List<CrawledPageEntity> = fetch(CrawledPageTable.CRAWLED_PAGE.STATUS, *values)

    /**
     * Fetch records that have <code>note BETWEEN lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfNoteTable(lowerInclusive: String?, upperInclusive: String?): List<CrawledPageEntity> = fetchRange(CrawledPageTable.CRAWLED_PAGE.NOTE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>note IN (values)</code>
     */
    fun fetchByNoteTable(vararg values: String): List<CrawledPageEntity> = fetch(CrawledPageTable.CRAWLED_PAGE.NOTE, *values)

    /**
     * Fetch records that have <code>exclude BETWEEN lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfExcludeTable(lowerInclusive: Boolean?, upperInclusive: Boolean?): List<CrawledPageEntity> = fetchRange(CrawledPageTable.CRAWLED_PAGE.EXCLUDE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>exclude IN (values)</code>
     */
    fun fetchByExcludeTable(vararg values: Boolean): List<CrawledPageEntity> = fetch(CrawledPageTable.CRAWLED_PAGE.EXCLUDE, *values.toTypedArray())

    /**
     * Fetch records that have <code>searched_at BETWEEN lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfSearchedAtTable(lowerInclusive: OffsetDateTime?, upperInclusive: OffsetDateTime?): List<CrawledPageEntity> = fetchRange(CrawledPageTable.CRAWLED_PAGE.SEARCHED_AT, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>searched_at IN (values)</code>
     */
    fun fetchBySearchedAtTable(vararg values: OffsetDateTime): List<CrawledPageEntity> = fetch(CrawledPageTable.CRAWLED_PAGE.SEARCHED_AT, *values)

    /**
     * Fetch records that have <code>crawled_at BETWEEN lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfCrawledAtTable(lowerInclusive: OffsetDateTime?, upperInclusive: OffsetDateTime?): List<CrawledPageEntity> = fetchRange(CrawledPageTable.CRAWLED_PAGE.CRAWLED_AT, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>crawled_at IN (values)</code>
     */
    fun fetchByCrawledAtTable(vararg values: OffsetDateTime): List<CrawledPageEntity> = fetch(CrawledPageTable.CRAWLED_PAGE.CRAWLED_AT, *values)
}
