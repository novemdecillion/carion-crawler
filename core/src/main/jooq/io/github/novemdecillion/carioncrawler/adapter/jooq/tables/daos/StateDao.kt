/*
 * This file is generated by jOOQ.
 */
package io.github.novemdecillion.carioncrawler.adapter.jooq.tables.daos


import io.github.novemdecillion.carioncrawler.adapter.jooq.tables.StateTable
import io.github.novemdecillion.carioncrawler.adapter.jooq.tables.pojos.StateEntity
import io.github.novemdecillion.carioncrawler.adapter.jooq.tables.records.StateRecord

import kotlin.collections.List

import org.jooq.Configuration
import org.jooq.impl.DAOImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class StateDao(configuration: Configuration?) : DAOImpl<StateRecord, StateEntity, String>(StateTable.STATE, StateEntity::class.java, configuration) {

    /**
     * Create a new StateDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: StateEntity): String? = o.key

    /**
     * Fetch records that have <code>key BETWEEN lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfKeyTable(lowerInclusive: String?, upperInclusive: String?): List<StateEntity> = fetchRange(StateTable.STATE.KEY, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>key IN (values)</code>
     */
    fun fetchByKeyTable(vararg values: String): List<StateEntity> = fetch(StateTable.STATE.KEY, *values)

    /**
     * Fetch a unique record that has <code>key = value</code>
     */
    fun fetchOneByKeyTable(value: String): StateEntity? = fetchOne(StateTable.STATE.KEY, value)

    /**
     * Fetch records that have <code>value BETWEEN lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfValueTable(lowerInclusive: String?, upperInclusive: String?): List<StateEntity> = fetchRange(StateTable.STATE.VALUE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>value IN (values)</code>
     */
    fun fetchByValueTable(vararg values: String): List<StateEntity> = fetch(StateTable.STATE.VALUE, *values)
}
