/*
 * This file is generated by jOOQ.
 */
package io.github.novemdecillion.carioncrawler.adapter.jooq.tables.records


import io.github.novemdecillion.carioncrawler.adapter.jooq.tables.AccountTable
import io.github.novemdecillion.carioncrawler.adapter.jooq.tables.interfaces.IAccount

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record3
import org.jooq.Row3
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class AccountRecord() : UpdatableRecordImpl<AccountRecord>(AccountTable.ACCOUNT), Record3<String?, String?, String?>, IAccount {

    override var username: String?
        set(value) = set(0, value)
        get() = get(0) as String?

    override var password: String?
        set(value) = set(1, value)
        get() = get(1) as String?

    override var role: String?
        set(value) = set(2, value)
        get() = get(2) as String?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<String?> = super.key() as Record1<String?>

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row3<String?, String?, String?> = super.fieldsRow() as Row3<String?, String?, String?>
    override fun valuesRow(): Row3<String?, String?, String?> = super.valuesRow() as Row3<String?, String?, String?>
    override fun field1(): Field<String?> = AccountTable.ACCOUNT.USERNAME
    override fun field2(): Field<String?> = AccountTable.ACCOUNT.PASSWORD
    override fun field3(): Field<String?> = AccountTable.ACCOUNT.ROLE
    override fun component1(): String? = username
    override fun component2(): String? = password
    override fun component3(): String? = role
    override fun value1(): String? = username
    override fun value2(): String? = password
    override fun value3(): String? = role

    override fun value1(value: String?): AccountRecord {
        this.username = value
        return this
    }

    override fun value2(value: String?): AccountRecord {
        this.password = value
        return this
    }

    override fun value3(value: String?): AccountRecord {
        this.role = value
        return this
    }

    override fun values(value1: String?, value2: String?, value3: String?): AccountRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        return this
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    override fun from(from: IAccount) {
        username = from.username
        password = from.password
        role = from.role
    }

    override fun <E : IAccount> into(into: E): E {
        into.from(this)
        return into
    }

    /**
     * Create a detached, initialised AccountRecord
     */
    constructor(username: String? = null, password: String? = null, role: String? = null): this() {
        this.username = username
        this.password = password
        this.role = role
    }
}
