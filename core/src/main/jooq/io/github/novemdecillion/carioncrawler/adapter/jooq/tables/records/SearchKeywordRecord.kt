/*
 * This file is generated by jOOQ.
 */
package io.github.novemdecillion.carioncrawler.adapter.jooq.tables.records


import io.github.novemdecillion.carioncrawler.adapter.jooq.tables.SearchKeywordTable
import io.github.novemdecillion.carioncrawler.adapter.jooq.tables.interfaces.ISearchKeyword

import java.time.LocalDate

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record2
import org.jooq.Row2
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class SearchKeywordRecord() : UpdatableRecordImpl<SearchKeywordRecord>(SearchKeywordTable.SEARCH_KEYWORD), Record2<String?, LocalDate?>, ISearchKeyword {

    override var keyword: String?
        set(value) = set(0, value)
        get() = get(0) as String?

    override var searchedAt: LocalDate?
        set(value) = set(1, value)
        get() = get(1) as LocalDate?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<String?> = super.key() as Record1<String?>

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row2<String?, LocalDate?> = super.fieldsRow() as Row2<String?, LocalDate?>
    override fun valuesRow(): Row2<String?, LocalDate?> = super.valuesRow() as Row2<String?, LocalDate?>
    override fun field1(): Field<String?> = SearchKeywordTable.SEARCH_KEYWORD.KEYWORD
    override fun field2(): Field<LocalDate?> = SearchKeywordTable.SEARCH_KEYWORD.SEARCHED_AT
    override fun component1(): String? = keyword
    override fun component2(): LocalDate? = searchedAt
    override fun value1(): String? = keyword
    override fun value2(): LocalDate? = searchedAt

    override fun value1(value: String?): SearchKeywordRecord {
        this.keyword = value
        return this
    }

    override fun value2(value: LocalDate?): SearchKeywordRecord {
        this.searchedAt = value
        return this
    }

    override fun values(value1: String?, value2: LocalDate?): SearchKeywordRecord {
        this.value1(value1)
        this.value2(value2)
        return this
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    override fun from(from: ISearchKeyword) {
        keyword = from.keyword
        searchedAt = from.searchedAt
    }

    override fun <E : ISearchKeyword> into(into: E): E {
        into.from(this)
        return into
    }

    /**
     * Create a detached, initialised SearchKeywordRecord
     */
    constructor(keyword: String? = null, searchedAt: LocalDate? = null): this() {
        this.keyword = keyword
        this.searchedAt = searchedAt
    }
}
