/*
 * This file is generated by jOOQ.
 */
package io.github.novemdecillion.carioncrawler.adapter.jooq.tables.daos


import io.github.novemdecillion.carioncrawler.adapter.jooq.tables.SearchedPageTable
import io.github.novemdecillion.carioncrawler.adapter.jooq.tables.pojos.SearchedPageEntity
import io.github.novemdecillion.carioncrawler.adapter.jooq.tables.records.SearchedPageRecord

import java.time.OffsetDateTime

import kotlin.collections.List

import org.jooq.Configuration
import org.jooq.impl.DAOImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class SearchedPageDao(configuration: Configuration?) : DAOImpl<SearchedPageRecord, SearchedPageEntity, String>(SearchedPageTable.SEARCHED_PAGE, SearchedPageEntity::class.java, configuration) {

    /**
     * Create a new SearchedPageDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: SearchedPageEntity): String? = o.url

    /**
     * Fetch records that have <code>url BETWEEN lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfUrlTable(lowerInclusive: String?, upperInclusive: String?): List<SearchedPageEntity> = fetchRange(SearchedPageTable.SEARCHED_PAGE.URL, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>url IN (values)</code>
     */
    fun fetchByUrlTable(vararg values: String): List<SearchedPageEntity> = fetch(SearchedPageTable.SEARCHED_PAGE.URL, *values)

    /**
     * Fetch a unique record that has <code>url = value</code>
     */
    fun fetchOneByUrlTable(value: String): SearchedPageEntity? = fetchOne(SearchedPageTable.SEARCHED_PAGE.URL, value)

    /**
     * Fetch records that have <code>create_at BETWEEN lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfCreateAtTable(lowerInclusive: OffsetDateTime?, upperInclusive: OffsetDateTime?): List<SearchedPageEntity> = fetchRange(SearchedPageTable.SEARCHED_PAGE.CREATE_AT, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>create_at IN (values)</code>
     */
    fun fetchByCreateAtTable(vararg values: OffsetDateTime): List<SearchedPageEntity> = fetch(SearchedPageTable.SEARCHED_PAGE.CREATE_AT, *values)
}
