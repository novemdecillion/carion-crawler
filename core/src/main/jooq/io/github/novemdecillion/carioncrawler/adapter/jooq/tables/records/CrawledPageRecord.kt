/*
 * This file is generated by jOOQ.
 */
package io.github.novemdecillion.carioncrawler.adapter.jooq.tables.records


import io.github.novemdecillion.carioncrawler.adapter.db.CrawledStatus
import io.github.novemdecillion.carioncrawler.adapter.jooq.tables.CrawledPageTable
import io.github.novemdecillion.carioncrawler.adapter.jooq.tables.interfaces.ICrawledPage

import java.time.OffsetDateTime

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record6
import org.jooq.Row6
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class CrawledPageRecord() : UpdatableRecordImpl<CrawledPageRecord>(CrawledPageTable.CRAWLED_PAGE), Record6<String?, CrawledStatus?, String?, Boolean?, OffsetDateTime?, OffsetDateTime?>, ICrawledPage {

    override var url: String?
        set(value) = set(0, value)
        get() = get(0) as String?

    override var status: CrawledStatus?
        set(value) = set(1, value)
        get() = get(1) as CrawledStatus?

    override var note: String?
        set(value) = set(2, value)
        get() = get(2) as String?

    override var exclude: Boolean?
        set(value) = set(3, value)
        get() = get(3) as Boolean?

    override var searchedAt: OffsetDateTime?
        set(value) = set(4, value)
        get() = get(4) as OffsetDateTime?

    override var crawledAt: OffsetDateTime?
        set(value) = set(5, value)
        get() = get(5) as OffsetDateTime?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<String?> = super.key() as Record1<String?>

    // -------------------------------------------------------------------------
    // Record6 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row6<String?, CrawledStatus?, String?, Boolean?, OffsetDateTime?, OffsetDateTime?> = super.fieldsRow() as Row6<String?, CrawledStatus?, String?, Boolean?, OffsetDateTime?, OffsetDateTime?>
    override fun valuesRow(): Row6<String?, CrawledStatus?, String?, Boolean?, OffsetDateTime?, OffsetDateTime?> = super.valuesRow() as Row6<String?, CrawledStatus?, String?, Boolean?, OffsetDateTime?, OffsetDateTime?>
    override fun field1(): Field<String?> = CrawledPageTable.CRAWLED_PAGE.URL
    override fun field2(): Field<CrawledStatus?> = CrawledPageTable.CRAWLED_PAGE.STATUS
    override fun field3(): Field<String?> = CrawledPageTable.CRAWLED_PAGE.NOTE
    override fun field4(): Field<Boolean?> = CrawledPageTable.CRAWLED_PAGE.EXCLUDE
    override fun field5(): Field<OffsetDateTime?> = CrawledPageTable.CRAWLED_PAGE.SEARCHED_AT
    override fun field6(): Field<OffsetDateTime?> = CrawledPageTable.CRAWLED_PAGE.CRAWLED_AT
    override fun component1(): String? = url
    override fun component2(): CrawledStatus? = status
    override fun component3(): String? = note
    override fun component4(): Boolean? = exclude
    override fun component5(): OffsetDateTime? = searchedAt
    override fun component6(): OffsetDateTime? = crawledAt
    override fun value1(): String? = url
    override fun value2(): CrawledStatus? = status
    override fun value3(): String? = note
    override fun value4(): Boolean? = exclude
    override fun value5(): OffsetDateTime? = searchedAt
    override fun value6(): OffsetDateTime? = crawledAt

    override fun value1(value: String?): CrawledPageRecord {
        this.url = value
        return this
    }

    override fun value2(value: CrawledStatus?): CrawledPageRecord {
        this.status = value
        return this
    }

    override fun value3(value: String?): CrawledPageRecord {
        this.note = value
        return this
    }

    override fun value4(value: Boolean?): CrawledPageRecord {
        this.exclude = value
        return this
    }

    override fun value5(value: OffsetDateTime?): CrawledPageRecord {
        this.searchedAt = value
        return this
    }

    override fun value6(value: OffsetDateTime?): CrawledPageRecord {
        this.crawledAt = value
        return this
    }

    override fun values(value1: String?, value2: CrawledStatus?, value3: String?, value4: Boolean?, value5: OffsetDateTime?, value6: OffsetDateTime?): CrawledPageRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        return this
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    override fun from(from: ICrawledPage) {
        url = from.url
        status = from.status
        note = from.note
        exclude = from.exclude
        searchedAt = from.searchedAt
        crawledAt = from.crawledAt
    }

    override fun <E : ICrawledPage> into(into: E): E {
        into.from(this)
        return into
    }

    /**
     * Create a detached, initialised CrawledPageRecord
     */
    constructor(url: String? = null, status: CrawledStatus? = null, note: String? = null, exclude: Boolean? = null, searchedAt: OffsetDateTime? = null, crawledAt: OffsetDateTime? = null): this() {
        this.url = url
        this.status = status
        this.note = note
        this.exclude = exclude
        this.searchedAt = searchedAt
        this.crawledAt = crawledAt
    }
}
