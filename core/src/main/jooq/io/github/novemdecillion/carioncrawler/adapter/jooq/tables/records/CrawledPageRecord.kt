/*
 * This file is generated by jOOQ.
 */
package io.github.novemdecillion.carioncrawler.adapter.jooq.tables.records


import io.github.novemdecillion.carioncrawler.adapter.jooq.tables.CrawledPageTable
import io.github.novemdecillion.carioncrawler.adapter.jooq.tables.interfaces.ICrawledPage

import java.time.OffsetDateTime

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record4
import org.jooq.Row4
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class CrawledPageRecord() : UpdatableRecordImpl<CrawledPageRecord>(CrawledPageTable.CRAWLED_PAGE), Record4<String?, String?, String?, OffsetDateTime?>, ICrawledPage {

    override var url: String?
        set(value) = set(0, value)
        get() = get(0) as String?

    override var html: String?
        set(value) = set(1, value)
        get() = get(1) as String?

    override var text: String?
        set(value) = set(2, value)
        get() = get(2) as String?

    override var seen: OffsetDateTime?
        set(value) = set(3, value)
        get() = get(3) as OffsetDateTime?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<String?> = super.key() as Record1<String?>

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row4<String?, String?, String?, OffsetDateTime?> = super.fieldsRow() as Row4<String?, String?, String?, OffsetDateTime?>
    override fun valuesRow(): Row4<String?, String?, String?, OffsetDateTime?> = super.valuesRow() as Row4<String?, String?, String?, OffsetDateTime?>
    override fun field1(): Field<String?> = CrawledPageTable.CRAWLED_PAGE.URL
    override fun field2(): Field<String?> = CrawledPageTable.CRAWLED_PAGE.HTML
    override fun field3(): Field<String?> = CrawledPageTable.CRAWLED_PAGE.TEXT
    override fun field4(): Field<OffsetDateTime?> = CrawledPageTable.CRAWLED_PAGE.SEEN
    override fun component1(): String? = url
    override fun component2(): String? = html
    override fun component3(): String? = text
    override fun component4(): OffsetDateTime? = seen
    override fun value1(): String? = url
    override fun value2(): String? = html
    override fun value3(): String? = text
    override fun value4(): OffsetDateTime? = seen

    override fun value1(value: String?): CrawledPageRecord {
        this.url = value
        return this
    }

    override fun value2(value: String?): CrawledPageRecord {
        this.html = value
        return this
    }

    override fun value3(value: String?): CrawledPageRecord {
        this.text = value
        return this
    }

    override fun value4(value: OffsetDateTime?): CrawledPageRecord {
        this.seen = value
        return this
    }

    override fun values(value1: String?, value2: String?, value3: String?, value4: OffsetDateTime?): CrawledPageRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        return this
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    override fun from(from: ICrawledPage) {
        url = from.url
        html = from.html
        text = from.text
        seen = from.seen
    }

    override fun <E : ICrawledPage> into(into: E): E {
        into.from(this)
        return into
    }

    /**
     * Create a detached, initialised CrawledPageRecord
     */
    constructor(url: String? = null, html: String? = null, text: String? = null, seen: OffsetDateTime? = null): this() {
        this.url = url
        this.html = html
        this.text = text
        this.seen = seen
    }
}
