/*
 * This file is generated by jOOQ.
 */
package io.github.novemdecillion.carioncrawler.adapter.jooq.tables.records


import io.github.novemdecillion.carioncrawler.adapter.jooq.tables.StateTable
import io.github.novemdecillion.carioncrawler.adapter.jooq.tables.interfaces.IState

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record2
import org.jooq.Row2
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class StateRecord() : UpdatableRecordImpl<StateRecord>(StateTable.STATE), Record2<String?, String?>, IState {

    override var key: String?
        set(value) = set(0, value)
        get() = get(0) as String?

    override var value: String?
        set(value) = set(1, value)
        get() = get(1) as String?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<String?> = super.key() as Record1<String?>

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row2<String?, String?> = super.fieldsRow() as Row2<String?, String?>
    override fun valuesRow(): Row2<String?, String?> = super.valuesRow() as Row2<String?, String?>
    override fun field1(): Field<String?> = StateTable.STATE.KEY
    override fun field2(): Field<String?> = StateTable.STATE.VALUE
    override fun component1(): String? = key
    override fun component2(): String? = value
    override fun value1(): String? = key
    override fun value2(): String? = value

    override fun value1(value: String?): StateRecord {
        this.key = value
        return this
    }

    override fun value2(value: String?): StateRecord {
        this.value = value
        return this
    }

    override fun values(value1: String?, value2: String?): StateRecord {
        this.value1(value1)
        this.value2(value2)
        return this
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    override fun from(from: IState) {
        key = from.key
        value = from.value
    }

    override fun <E : IState> into(into: E): E {
        into.from(this)
        return into
    }

    /**
     * Create a detached, initialised StateRecord
     */
    constructor(key: String? = null, value: String? = null): this() {
        this.key = key
        this.value = value
    }
}
