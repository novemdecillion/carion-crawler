/*
 * This file is generated by jOOQ.
 */
package io.github.novemdecillion.carioncrawler.adapter.jooq.tables.daos


import io.github.novemdecillion.carioncrawler.adapter.jooq.tables.AccountTable
import io.github.novemdecillion.carioncrawler.adapter.jooq.tables.pojos.AccountEntity
import io.github.novemdecillion.carioncrawler.adapter.jooq.tables.records.AccountRecord

import kotlin.collections.List

import org.jooq.Configuration
import org.jooq.impl.DAOImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class AccountDao(configuration: Configuration?) : DAOImpl<AccountRecord, AccountEntity, String>(AccountTable.ACCOUNT, AccountEntity::class.java, configuration) {

    /**
     * Create a new AccountDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: AccountEntity): String? = o.username

    /**
     * Fetch records that have <code>username BETWEEN lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfUsernameTable(lowerInclusive: String?, upperInclusive: String?): List<AccountEntity> = fetchRange(AccountTable.ACCOUNT.USERNAME, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>username IN (values)</code>
     */
    fun fetchByUsernameTable(vararg values: String): List<AccountEntity> = fetch(AccountTable.ACCOUNT.USERNAME, *values)

    /**
     * Fetch a unique record that has <code>username = value</code>
     */
    fun fetchOneByUsernameTable(value: String): AccountEntity? = fetchOne(AccountTable.ACCOUNT.USERNAME, value)

    /**
     * Fetch records that have <code>password BETWEEN lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfPasswordTable(lowerInclusive: String?, upperInclusive: String?): List<AccountEntity> = fetchRange(AccountTable.ACCOUNT.PASSWORD, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>password IN (values)</code>
     */
    fun fetchByPasswordTable(vararg values: String): List<AccountEntity> = fetch(AccountTable.ACCOUNT.PASSWORD, *values)

    /**
     * Fetch records that have <code>role BETWEEN lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfRoleTable(lowerInclusive: String?, upperInclusive: String?): List<AccountEntity> = fetchRange(AccountTable.ACCOUNT.ROLE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>role IN (values)</code>
     */
    fun fetchByRoleTable(vararg values: String): List<AccountEntity> = fetch(AccountTable.ACCOUNT.ROLE, *values)
}
